/**
 * Copyright 2017 Ignacio del Valle Alles idelvall@brutusin.org.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *	  http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NandMines application controller.
 * Overall the application (i,j) indexes are used for columns and rows respectively, starting from 0.
 */
class NandMines {

    static int BOMBS_NUMBER;
    static String HELP_MESSAGE, HELP_BACK_MESSAGE, BOOM_MESSAGE, CONGRATS_MESSAGE;

    field Model model;	     // game data 
    field boolean ended;     // game over
    field int ci, cj;        // current position (selected square)
    field int flags, hidden; // counters

    /** Static initializations */
    function void init(){
        let BOMBS_NUMBER = 50;
        let HELP_MESSAGE = "Press 'h' for help";
        let HELP_BACK_MESSAGE = "Press 'ESC' to return to game";
        let BOOM_MESSAGE = "BOOOM!  (press 'r' to restart)";
        let CONGRATS_MESSAGE = "Congratulations!";
        
        do Model.init();
        do View.init();
        return;
    }

    constructor NandMines new(){
        do restart();
        return this;
    }

    /** Execution entry point. */
    function void run() {
        var char key;                         // the key currently pressed by the user
        var boolean exit, randomize, help;    // control flags 
        var NandMines nandMines;              // application controller
        var int counter;                      // used as randomization seed

        do NandMines.init();
        let exit = false;
        let randomize = true;
        let nandMines = NandMines.new();
        let help = false;
        while (~exit) {
            // waits for a key to be pressed and released
            while (key = 0) {
                let counter = counter + 1;
                let key = Keyboard.keyPressed();
            }
            while (~(Keyboard.keyPressed() = 0)) {}
            if(help){
                if (key = 140) {  // ESC
                    do nandMines.paintGameBoard(); 
                    let help = false;
                }      
            } else {
                if(randomize){
                    do nandMines.randomizeBombs(counter);
                    let randomize = false;
                }
                if ((key = 81)|(key = 113))  { let exit = true; }      // q key
                if ((key = 82)|(key = 114))  {                         // r key
                    do nandMines.restart();    
                    let randomize = true;
                }       
                if ((key = 72)|(key = 104)) {                          // h key
                    do nandMines.showHelpDialog();
                    let help = true;    
                }   

                if (key = 130) { do nandMines.moveHorizontal(false); } // left arrow
                if (key = 131) { do nandMines.moveVertical(false);}    // up arrow
                if (key = 132) { do nandMines.moveHorizontal(true); }  // right arrow
                if (key = 133) { do nandMines.moveVertical(true); }    // down arrow
                if ((key = 129)|(key = 139)) { do nandMines.clearSquare(); } // del/backspace key
                if ((key = 128)|(key = 138)) { do nandMines.toggleFlag(); } // ins/enter key
            }
            let key = 0;
        } 

        do nandMines.dispose();

        return;
    }

    /** Starts a new game. */
    method void restart(){
        if(~(model = null)){
            do model.dispose();
        }
        let model = Model.new();
        let ended = false;
        let ci = 0;
        let cj = 0;
        let flags = 0;
        let hidden = Model.getRows() * Model.getColumns();
        do View.drawFrame();
        do paintGameBoard();
        return;
    }

    /** Randomly places the bombs over the model. */
    method void randomizeBombs(int randomSeed){
        do model.setBombs(BOMBS_NUMBER, randomSeed);
        return;
    }

    /** Shows the help dialog. */
    method void showHelpDialog(){
        do View.showHelp();
        do View.showMessage(HELP_BACK_MESSAGE);
        return;
    }

    /** Paints the squares board. */
    method void paintGameBoard(){
        do paintSquares();
        do paintSelected();
        do View.showMessage(HELP_MESSAGE);
        return;
    }

    /** Left/right movements of the currently selected square. */
    method void moveHorizontal(boolean right){
        do moveHorizontalStartingIn(ci, cj, right);
        return;
    }

    /** Left/right movements to a valid (hidden) square from the specified coordinates. */
    method void moveHorizontalStartingIn(int i, int j, boolean right){
        var Square s;
        var int k;
        if(ended){
            return;
        }
        if(right){
            let k = i + 1;
        } else {
            let k = i - 1;
        }
        while((k < Model.getColumns()) & (k >  - 1)){
            let s = model.getSquare(k,j);
            if(s.isHidden()){
                do paintSquare(ci,cj);
                let ci = k;
                let cj = j;
                do paintSelected();
                return;
            }
            if(right){
                let k = k + 1;
            } else {
                let k = k - 1;
            }
        }

        if(right){
            if(j = (Model.getRows() - 1)){
                let j = 0;
            } else {
                let j = j + 1;
            }
            do moveHorizontalStartingIn( - 1, j, right);
        } else {
            if(j = 0){
                let j = Model.getRows() - 1;
            } else {
                let j = j - 1;
            }
            do moveHorizontalStartingIn(Model.getColumns(), j, right);
        }
        return;
    }

    /** Up/down movements of the currently selected square. */
    method void moveVertical(boolean down){
        do moveVerticalStartingIn(ci,cj,down);
        return;
    }

    /** Up/down movements to a valid (hidden) square from the specified coordinates. */
    method void moveVerticalStartingIn(int i, int j, boolean down){
        var Square s;
        var int k;
        if(ended){
            return;
        }
        if(down){
            let k = j + 1;
        }else{
            let k = j - 1;
        }
        while((k < Model.getRows()) & (k > - 1)){
            let s = model.getSquare(i,k);
            if(s.isHidden()){
                do paintSquare(ci,cj);
                let ci = i;
                let cj = k;
                do paintSelected();
                return;
            }
            if(down){
                let k = k + 1;
            }else{
                let k = k - 1;
            }
        }
        if(down){
            if(i = (Model.getColumns() - 1)){
                let i = 0;
            } else {
                let i = i + 1;
            }
            do moveVerticalStartingIn(i,  - 1, down);
        } else {
            if(i = 0){
                let i = Model.getColumns() - 1;
            } else {
                let i = i - 1;
            }
            do moveVerticalStartingIn(i, Model.getRows(), down);
        }
        return;
    }

    /** Put/remove a flag in the current active position. */
    method void toggleFlag(){
        var Square s;
        if(ended){
            return;
        }
        let s = model.getSquare(ci,cj);
        do s.setFlag(~s.isFlag());
        if(s.isFlag()){
                let flags = flags + 1;
        } else {
                let flags = flags - 1;
        }
        do View.showLocatedBombsMessage(flags, model.getBombs());
        do paintSelected();
        do checkComplete();
        return;
    }

    /** Reveals the content of the currenly selected square. */
    method void clearSquare(){
        var int i;        
        var Square s;
        if(ended){
            return;
        }
        let s = model.getSquare(ci,cj);
        if(s = null){
            return;
        }
        do s.setHidden(false);
        let hidden = hidden - 1;
        if(s.isFlag()){
            let flags = flags - 1;
        }
        if(s.isBomb()){
            let ended=true;
            do View.showMessage(BOOM_MESSAGE);
            do paintSquares();
        } else {
            do paintSquare(ci,cj);
            do clearBlanks();
            do checkComplete();
        }
        return;
    }

    /** Checks if the game has been completed. */
    method void checkComplete(){
        if((hidden = flags) & (hidden = model.getBombs())){
            let ended=true;
            do View.showMessage(CONGRATS_MESSAGE);            
        }
        return;
    }

    /** Iteratively clears the adjacent squares with no bombs close to them. */
    method void clearBlanks(){
        var int i,j;
        var Square s;

        // Uses as a queue for an iterative BFS traversal of the nodes. 
        // BFS gives a prettier effect than DFS for cascading discovering. 
        // Iterative approach is required to avoid deep recursion stacks that may overflow
        var LinkedList queue; 
        var Array visited;  

        let visited = Array.new(Model.getRows()*Model.getColumns());
        let i = 0;
        while(i < (Model.getRows() * Model.getColumns())){
           let visited[i] = false;
           let i = i + 1;
        }
        let i = ci;
        let j = cj;
        let s = model.getSquare(i,j);
        let queue = LinkedList.new();
        do queue.addLast(s.getId());
        while(queue.getSize()>0){
            let s = model.getSquareById(queue.removeFirst());
            if(~(s = null)){                
                if(~s.isFlag()){
                    if(~visited[s.getId()]){
                        let visited[s.getId()] = true;
                        if(~s.isBomb()){
                            let i = Model.getColumn(s.getId());
                            let j = Model.getRow(s.getId());
                            if(s.isHidden()){
                                do s.setHidden(false);
                                let hidden = hidden - 1;
                            }
                            do paintSquare(i,j);
                            if(getMines(i,j)=0){
                                do queue.addLast(Model.getId(i - 1,j - 1));
                                do queue.addLast(Model.getId(i - 1,j));
                                do queue.addLast(Model.getId(i - 1,j + 1));
                                do queue.addLast(Model.getId(i,j - 1));
                                do queue.addLast(Model.getId(i,j + 1));
                                do queue.addLast(Model.getId(i + 1,j - 1));
                                do queue.addLast(Model.getId(i + 1,j));
                                do queue.addLast(Model.getId(i + 1,j + 1));                                                    
                            }
                        }
                    }
                }
            }
        }
        do queue.dispose();
        do visited.dispose();
        return;
    }

    /** Gets the number of bombs surrounding the specified location. */
    method int getMines(int i, int j){
        var Square s;
        var int sum;
        let sum = 0;
        let s = model.getSquare(i - 1,j - 1);
        if(~(s = null)){
            if(s.isBomb()){
                let sum = sum + 1;
            }
        }
        let s = model.getSquare(i - 1,j);
        if(~(s = null)){
            if(s.isBomb()){
                let sum = sum + 1;
            }
        }
        let s = model.getSquare(i - 1,j + 1);
        if(~(s = null)){
            if(s.isBomb()){
                let sum = sum + 1;
            }
        }
        let s = model.getSquare(i,j - 1);
        if(~(s = null)){
            if(s.isBomb()){
                let sum = sum + 1;
            }
        }
        let s = model.getSquare(i,j + 1);
        if(~(s = null)){
            if(s.isBomb()){
                let sum = sum + 1;
            }
        }
        let s = model.getSquare(i + 1,j - 1);
        if(~(s = null)){
            if(s.isBomb()){
                let sum = sum + 1;
            }
        }
        let s = model.getSquare(i + 1,j);
        if(~(s = null)){
            if(s.isBomb()){
                let sum = sum + 1;
            }
        }
        let s = model.getSquare(i + 1,j + 1);
        if(~(s = null)){
            if(s.isBomb()){
                let sum = sum + 1;
            }
        }
        return sum;
    }

    /** Paints the current selected square. */
    method void paintSelected(){
        var Square s;
        if(ended){
            return;
        }
        let s = model.getSquare(ci,cj);
        if(s.isFlag()){
            do View.drawFlagSelected(View.getSquarePosition(ci, cj));
        } else {
            do View.drawSelected(View.getSquarePosition(ci, cj));
        }
        return;
    }

    /** Paints all the squares. */
    method void paintSquares(){
        var int i,j;
        let i = 0; 
        while(i < Model.getColumns()){
            let j = 0;
            while(j < Model.getRows()){
               do paintSquare(i,j);
               let j = j + 1;
            }
            let i = i + 1;
        }
        return;
    }

    /** Paints the square at the specified location. */
    method void paintSquare(int i, int j){
        var int mines;
        var Square s;
        if(model = null){
                return;
        }
        let s = model.getSquare(i,j);
        if(s = null){
            return;
        }
        if(s.isHidden()){
            if(ended){
                if(s.isFlag()){
                    if(s.isBomb()){
                        do View.drawFlag(View.getSquarePosition(i,j));
                        return;
                    } else {
                        do View.drawFail(View.getSquarePosition(i,j));
                        return;
                    }
                } else {
                    if(s.isBomb()){
                        do View.drawMine(View.getSquarePosition(i,j));
                        return;
                    } else {
                        do View.drawHidden(View.getSquarePosition(i,j));
                        return;
                    }
                }
            } else {
                if(s.isFlag()){
                    do View.drawFlag(View.getSquarePosition(i,j));
                    return;
                } else {
                    do View.drawHidden(View.getSquarePosition(i,j));
                    return;
                }
            }
        } else {
            if(s.isBomb()){
                do View.drawExplosion(View.getSquarePosition(i,j));
                return;
            }

            let mines = getMines(i,j);
            if(mines = 0){
                do View.drawBlank(View.getSquarePosition(i,j));
                return;
            }
            if(mines = 1){
                do View.draw1(View.getSquarePosition(i,j));
                return;
            }
            if(mines = 2){
                do View.draw2(View.getSquarePosition(i,j));
                return;
            }
            if(mines = 3){
                do View.draw3(View.getSquarePosition(i,j));
                return;
            }
            if(mines = 4){
                do View.draw4(View.getSquarePosition(i,j));
                return;
            }
            if(mines = 5){
                do View.draw5(View.getSquarePosition(i,j));
                return;
            }
            if(mines = 6){
                do View.draw6(View.getSquarePosition(i,j));
                return;
            }
            if(mines = 7){
                do View.draw7(View.getSquarePosition(i,j));
                return;
            }
            if(mines = 8){
                do View.draw8(View.getSquarePosition(i,j));
                return;
            }
        }
        return;
    }
   
    /** Disposes this square. */
    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }
}